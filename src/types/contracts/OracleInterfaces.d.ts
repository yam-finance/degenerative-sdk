/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OracleInterfacesInterface extends ethers.utils.Interface {
  functions: {
    "Bridge()": FunctionFragment;
    "CollateralWhitelist()": FunctionFragment;
    "FinancialContractsAdmin()": FunctionFragment;
    "GenericHandler()": FunctionFragment;
    "IdentifierWhitelist()": FunctionFragment;
    "OptimisticOracle()": FunctionFragment;
    "Oracle()": FunctionFragment;
    "Registry()": FunctionFragment;
    "Store()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CollateralWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FinancialContractsAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GenericHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IdentifierWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OptimisticOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "Registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "Store", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CollateralWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FinancialContractsAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GenericHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IdentifierWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OptimisticOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Store", data: BytesLike): Result;

  events: {};
}

export class OracleInterfaces extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OracleInterfacesInterface;

  functions: {
    Bridge(overrides?: CallOverrides): Promise<[string]>;

    CollateralWhitelist(overrides?: CallOverrides): Promise<[string]>;

    FinancialContractsAdmin(overrides?: CallOverrides): Promise<[string]>;

    GenericHandler(overrides?: CallOverrides): Promise<[string]>;

    IdentifierWhitelist(overrides?: CallOverrides): Promise<[string]>;

    OptimisticOracle(overrides?: CallOverrides): Promise<[string]>;

    Oracle(overrides?: CallOverrides): Promise<[string]>;

    Registry(overrides?: CallOverrides): Promise<[string]>;

    Store(overrides?: CallOverrides): Promise<[string]>;
  };

  Bridge(overrides?: CallOverrides): Promise<string>;

  CollateralWhitelist(overrides?: CallOverrides): Promise<string>;

  FinancialContractsAdmin(overrides?: CallOverrides): Promise<string>;

  GenericHandler(overrides?: CallOverrides): Promise<string>;

  IdentifierWhitelist(overrides?: CallOverrides): Promise<string>;

  OptimisticOracle(overrides?: CallOverrides): Promise<string>;

  Oracle(overrides?: CallOverrides): Promise<string>;

  Registry(overrides?: CallOverrides): Promise<string>;

  Store(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Bridge(overrides?: CallOverrides): Promise<string>;

    CollateralWhitelist(overrides?: CallOverrides): Promise<string>;

    FinancialContractsAdmin(overrides?: CallOverrides): Promise<string>;

    GenericHandler(overrides?: CallOverrides): Promise<string>;

    IdentifierWhitelist(overrides?: CallOverrides): Promise<string>;

    OptimisticOracle(overrides?: CallOverrides): Promise<string>;

    Oracle(overrides?: CallOverrides): Promise<string>;

    Registry(overrides?: CallOverrides): Promise<string>;

    Store(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    Bridge(overrides?: CallOverrides): Promise<BigNumber>;

    CollateralWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    FinancialContractsAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    GenericHandler(overrides?: CallOverrides): Promise<BigNumber>;

    IdentifierWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    OptimisticOracle(overrides?: CallOverrides): Promise<BigNumber>;

    Oracle(overrides?: CallOverrides): Promise<BigNumber>;

    Registry(overrides?: CallOverrides): Promise<BigNumber>;

    Store(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CollateralWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FinancialContractsAdmin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GenericHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IdentifierWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OptimisticOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Store(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
