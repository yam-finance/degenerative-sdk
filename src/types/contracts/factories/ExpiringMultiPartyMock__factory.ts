/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExpiringMultiPartyMock,
  ExpiringMultiPartyMockInterface,
} from "../ExpiringMultiPartyMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_financialProductLibraryAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_expirationTimestamp",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "rawValue",
            type: "uint256",
          },
        ],
        internalType: "struct FixedPoint.Unsigned",
        name: "_collateralRequirement",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "_priceIdentifier",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_timerAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "collateralRequirement",
    outputs: [
      {
        internalType: "uint256",
        name: "rawValue",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "expirationTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "financialProductLibrary",
    outputs: [
      {
        internalType: "contract FinancialProductLibrary",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceIdentifier",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
    ],
    name: "setCurrentTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "timerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "rawValue",
            type: "uint256",
          },
        ],
        internalType: "struct FixedPoint.Unsigned",
        name: "price",
        type: "tuple",
      },
    ],
    name: "transformCollateralRequirement",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "rawValue",
            type: "uint256",
          },
        ],
        internalType: "struct FixedPoint.Unsigned",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "rawValue",
            type: "uint256",
          },
        ],
        internalType: "struct FixedPoint.Unsigned",
        name: "price",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "requestTime",
        type: "uint256",
      },
    ],
    name: "transformPrice",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "rawValue",
            type: "uint256",
          },
        ],
        internalType: "struct FixedPoint.Unsigned",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestTime",
        type: "uint256",
      },
    ],
    name: "transformPriceIdentifier",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161078738038061078783398101604081905261002f9161008e565b600080546001600160a01b03199081166001600160a01b039384161790915560029490945591516003556001805490931693909116929092179055600455610124565b80516001600160a01b038116811461008957600080fd5b919050565b600080600080600085870360a08112156100a6578182fd5b6100af87610072565b9550602087015194506020603f19820112156100c9578182fd5b50604051602081016001600160401b03811182821017156100f857634e487b7160e01b83526041600452602483fd5b604090815287015181526060870151909350915061011860808701610072565b90509295509295909350565b610654806101336000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806348e30c3f1161006657806348e30c3f1461011e57806362b5f7f5146101265780639375f0e91461013957806397523661146101415780639f43ddd2146101495761009e565b80630ff49b90146100a3578063197f7848146100cc5780631c39c38d146100df57806322f8e566146100f457806329cb924d14610109575b600080fd5b6100b66100b1366004610550565b610151565b6040516100c391906105bd565b60405180910390f35b6100b66100da366004610509565b6101fd565b6100e76102c8565b6040516100c39190610592565b61010761010236600461057a565b6102d7565b005b610111610351565b6040516100c391906105a6565b6101116103f4565b61011161013436600461057a565b6103fa565b6100e761049e565b6101116104ad565b6101116104b3565b6101596104b9565b6001546001600160a01b03166101705750816101f7565b60015460405162ff49b960e41b81526001600160a01b0390911690630ff49b90906101a190869086906004016105d7565b60206040518083038186803b1580156101b957600080fd5b505afa9250505080156101e9575060408051601f3d908101601f191682019092526101e69181019061052b565b60015b6101f45750816101f7565b90505b92915050565b6102056104b9565b6001546001600160a01b031661022b5750604080516020810190915260035481526102c3565b600154604051632a31263760e01b81526001600160a01b0390911690632a3126379061025e9085906003906004016105c7565b60206040518083038186803b15801561027657600080fd5b505afa9250505080156102a6575060408051601f3d908101601f191682019092526102a39181019061052b565b60015b6102c05750604080516020810190915260035481526102c3565b90505b919050565b6000546001600160a01b031681565b6000546001600160a01b03166102ec57600080fd5b60005460405163117c72b360e11b81526001600160a01b03909116906322f8e5669061031c9084906004016105a6565b600060405180830381600087803b15801561033657600080fd5b505af115801561034a573d6000803e3d6000fd5b5050505050565b600080546001600160a01b0316156103ee5760008054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e791906104f1565b90506103f1565b50425b90565b60035481565b6001546000906001600160a01b031661041657506004546102c3565b6001546004805460405163f19371b760e01b81526001600160a01b039093169263f19371b79261044992918791016105af565b60206040518083038186803b15801561046157600080fd5b505afa925050508015610491575060408051601f3d908101601f1916820190925261048e918101906104f1565b60015b6102c057506004546102c3565b6001546001600160a01b031681565b60045481565b60025481565b6040518060200160405280600081525090565b6000602082840312156104dd578081fd5b6104e760206105e6565b9135825250919050565b600060208284031215610502578081fd5b5051919050565b60006020828403121561051a578081fd5b61052483836104cc565b9392505050565b60006020828403121561053c578081fd5b61054660206105e6565b9151825250919050565b60008060408385031215610562578081fd5b61056c84846104cc565b946020939093013593505050565b60006020828403121561058b578081fd5b5035919050565b6001600160a01b0391909116815260200190565b90815260200190565b918252602082015260400190565b9051815260200190565b9151825254602082015260400190565b91518252602082015260400190565b60405181810167ffffffffffffffff8111828210171561061657634e487b7160e01b600052604160045260246000fd5b60405291905056fea2646970667358221220176fe57db5268e858c694e4fe72b11ef0a79d91db065a1836a6e9386f844454e64736f6c63430008000033";

export class ExpiringMultiPartyMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _financialProductLibraryAddress: string,
    _expirationTimestamp: BigNumberish,
    _collateralRequirement: { rawValue: BigNumberish },
    _priceIdentifier: BytesLike,
    _timerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExpiringMultiPartyMock> {
    return super.deploy(
      _financialProductLibraryAddress,
      _expirationTimestamp,
      _collateralRequirement,
      _priceIdentifier,
      _timerAddress,
      overrides || {}
    ) as Promise<ExpiringMultiPartyMock>;
  }
  getDeployTransaction(
    _financialProductLibraryAddress: string,
    _expirationTimestamp: BigNumberish,
    _collateralRequirement: { rawValue: BigNumberish },
    _priceIdentifier: BytesLike,
    _timerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _financialProductLibraryAddress,
      _expirationTimestamp,
      _collateralRequirement,
      _priceIdentifier,
      _timerAddress,
      overrides || {}
    );
  }
  attach(address: string): ExpiringMultiPartyMock {
    return super.attach(address) as ExpiringMultiPartyMock;
  }
  connect(signer: Signer): ExpiringMultiPartyMock__factory {
    return super.connect(signer) as ExpiringMultiPartyMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExpiringMultiPartyMockInterface {
    return new utils.Interface(_abi) as ExpiringMultiPartyMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExpiringMultiPartyMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ExpiringMultiPartyMock;
  }
}
