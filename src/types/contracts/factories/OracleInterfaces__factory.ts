/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OracleInterfaces,
  OracleInterfacesInterface,
} from "../OracleInterfaces";

const _abi = [
  {
    inputs: [],
    name: "Bridge",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CollateralWhitelist",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FinancialContractsAdmin",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GenericHandler",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IdentifierWhitelist",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OptimisticOracle",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Oracle",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Registry",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Store",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6101f861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80634f4a180b116100705780634f4a180b146100d8578063598dd097146100e05780635fa2ef10146100e85780637db9743b146100f0578063f24a534e146100f85761009d565b8063079b6c63146100a25780631a4dbd1c146100c05780632a71e5b3146100c857806342e90c33146100d0575b600080fd5b6100aa610100565b6040516100b791906101b9565b60405180910390f35b6100aa610115565b6100aa61012c565b6100aa610150565b6100aa61015c565b6100aa610176565b6100aa610190565b6100aa61019d565b6100aa6101ac565b6d23b2b732b934b1a430b7323632b960911b81565b6f4f7074696d69737469634f7261636c6560801b81565b7f46696e616e6369616c436f6e74726163747341646d696e00000000000000000081565b6453746f726560d81b81565b721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b81565b7210dbdb1b185d195c985b15da1a5d195b1a5cdd606a1b81565b6542726964676560d01b81565b67526567697374727960c01b81565b654f7261636c6560d01b81565b9081526020019056fea2646970667358221220f44a91f1689570d5d7cf64cf9fbb29ceceaca050a4cac52edca61d3599306f4c64736f6c63430008000033";

export class OracleInterfaces__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleInterfaces> {
    return super.deploy(overrides || {}) as Promise<OracleInterfaces>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OracleInterfaces {
    return super.attach(address) as OracleInterfaces;
  }
  connect(signer: Signer): OracleInterfaces__factory {
    return super.connect(signer) as OracleInterfaces__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleInterfacesInterface {
    return new utils.Interface(_abi) as OracleInterfacesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleInterfaces {
    return new Contract(address, _abi, signerOrProvider) as OracleInterfaces;
  }
}
